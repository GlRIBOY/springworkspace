<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.yedam.app.emp.mapper.EmpMapper">
  	<!-- 전체조회 -->
  	<select id="selectEmpAllList" resultType="EmpVO">
  		<!-- c_id : cId => get, set 하면 앞에 한글자만 대문자로 바꾼다
  		즉, setCId가 되어 sql에서 인식하길 cid로 인식해버림 그러므로 컬럼은 2문자, 2단어 이상-->
  		SELECT employee_id
  				, first_name
  				, last_name
  				, email
  				, phone_number
  				, hire_date
  				, job_id
  				, salary
  				, commission_pct
  				, manager_id
  				, department_id
  		FROM employees
  		<where>
  			<if test="managerId > 0">
  				manager_id = #{managerId}
  			</if>
  			<if test="departmentId > 0">
  				department_id = #{departmentId}
  			</if>
  		</where>
  		ORDER BY employee_id
  	</select>
 	<!-- 단건조회 -->
  	<select id="selectEmpInfo" resultType="EmpVO">
  	  		SELECT employee_id
  				, first_name
  				, last_name
  				, email
  				, phone_number
  				, hire_date
  				, job_id
  				, salary
  				, commission_pct
  				, manager_id
  				, department_id
  		FROM employees
  		WHERE employee_id = #{employeeId}
  		<!-- #은 Prepared Statement, $는 statement #는 타입변환을 해줌(?)-->
  	</select>
  	<!-- 등록 -->
  	<insert id="insertEmpInfo" parameterType="EmpVO">
  		<selectKey keyProperty="employeeId" 
  					resultType="int"
  					order="BEFORE"><!-- keyProperty는 파라미터(EmpVO) 안에있는 데이터타입 -->
  			SELECT NVL(MAX(employee_id),0)+1
  			FROM employees
  		</selectKey>
  		INSERT INTO EMPLOYEES
  			(
  				employee_id
  				<if test="firstName != null and firstName.equals('')">
  				, first_name
  				</if>
  				, last_name
  				, email
  				, hire_date
  				, job_id
  				<if test="departmentId > 0">
  				, department_id
  				</if>
  			)
  		VALUES
  			(
  				#{employeeId}
  				<if test="firstName != null and firstName.equals('')">
  				, #{firstName}
  				</if>
  				, #{lastName}
  				, #{email}
  				<choose>
  					<when test="hireDate == null">
  						, sysdate
  					</when>
  					<otherwise>
  						, #{hireDate}
  					</otherwise>
  				</choose>
  				, #{jobId}
  				<if test="departmentId > 0">
  				, #{departmentId}
  				</if>
  			)
  	</insert>
 	<!-- 수정:급여를 정해진 비율로 인상 -->
  	<update id="updateEmpSal">
  		UPDATE employees
  		SET salary = salary * (1+#{raise}/100)
  		WHERE employee_id = #{empId}
  	</update>
  	
  	<!-- 수정:사원 정보 수정 -->
  	<!-- 1)단건 조회가 선행되는 경우 모든 항목에 데이터가 존재하기때문에 그냥 전체업데이트 하면됨 -->
  	<!-- 2)개별 정보수정이 일어나는 경우엔 다이나믹SQL을 이용하는게 낫다 -->
  	<update id="updateEmpInfo" parameterType="EmpVO">
  	  		UPDATE employees
  		<set><!-- 하나이상의 컬럼이 남도록 조건걸어야함.안그러면 set없어짐 -->
  			<if test="firstName != null and !firstName.equals('')">
  				first_name = #{firstName}
  			</if>
  			<if test="email != null and !email.equals('')">
  				, email = #{email}
  			</if>
  			<if test="salary lte 0">
  				, salary = 1000
  			</if>
  			<if test="salary gt 0">
  				, salary = #{salary}
  			</if>
  		</set>
  		WHERE employee_id = #{employeeId}
  	</update>
  	<!-- 삭제 -->
  	<delete id="deleteEmpInfo" parameterType="int">
  		DELETE FROM employees
  		WHERE employee_id = #{eid}
  		<!-- 값이 하나만 넘어오는경우 변수명은 상관없다. 넘어오는 값과 경로는 하나라서(?) -->
  		<!-- 파람은 예외다. 값을 여러개 받는경우 변수명이 중요하다. 그래서 @Param을 쓴다-->
  	</delete>
  </mapper>